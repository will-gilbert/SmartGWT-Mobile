task usage << { print """
==================================================================================

DEVELOPMENT:
------------

gradle clean compileGWT
  Cross compiles the client side Java into JavaScript; launches Jetty.  Use any browser to 
  connect to the localhost on the port defined by 'jettyRun.httpPort'


DEPLOYMENT:
-----------
gradle clean compileGWT
    Creates 'app' in 'target' directory. Rename to 'app-new', move to server, rename existing
    'app' to 'app-old', then rename 'app-new' to 'app', delete or save 'app-old'.  
    This minimized service interruption.


==================================================================================
"""}

// Used to modify properties file resources
import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'java'


// C O N F I G U R A T I O N ------------------------------------------------------------------

// Project Configuration ----------------------------------------------------------------------

ext.applicationName = "Mobile Esperanto"
group = 'client'
version = '1.0'

// GWT Configuration
ext.gwtModule = 'org.informagen.mobileeo.Application'  // Path to module descriptor
ext.gwtModuleRenamedTo = 'app'                          // 'rename-to' within module descriptor
ext.gwtRunTarget = 'index.html'                         // HTML launching file
ext.gwtBuildDir = 'build-gwt'                           // GWT build directory


// Version Dependencies
ext.gwtSDK   = '2.6.1'
ext.smartgwtMobile  = '1.0d-SNAPSHOT' // '1.0d_2014-12-06'
ext.ginVersion   = '2.1.2' //'1.5.0'
ext.guiceVersion = '3.0'

// Java SDK version,  Compiler flags
sourceCompatibility = 1.7
targetCompatibility = sourceCompatibility
compileJava.options.compilerArgs = []  // To invoke Xlint use: ['-Xlint:unchecked']

// Properties Configuration -------------------------------------------------------------------

ext.localityProperties = [
    'project.version'                : project.version,
    'project.name'                   : applicationName,
    'user.agent'                     : project.hasProperty('tomcat')  ? 'safari,gecko1_8' : findProperty('user.agent', 'safari'),
]

// R e p o s i t o r i e s   &   D e p e n d e n c i e s --------------------------------------

configurations { [gwtCompile] }

repositories {

    maven { url "http://informagen.org/maven" }      // Informagen repository; mobile-gwt

    mavenLocal()                                       // User's local
    mavenCentral()                                     // Maven Central repository; GWT
}


dependencies {
    compile ([

        // SmartGWT Mobile =================================================
        "com.smartgwt:smartgwt-mobile:$smartgwtMobile",

        // GWT =============================================================
        "com.google.gwt:gwt-user:$gwtSDK",

        "com.google.gwt.inject:gin:$ginVersion",
        "com.google.inject:guice:$guiceVersion"
    ])
    
    runtime ([
        "com.google.gwt:gwt-servlet:$gwtSDK",
        "com.google.gwt:validation-api:1.0.0.GA",
        "com.google.gwt:validation-sources:1.0.0.GA"
    ])

    testCompile([  /* TBD*/ ])

    testRuntime([ /* TBD*/ ])

    // The GWT cross compiler; Not needed for production or testing
    gwtCompile([
        "com.google.gwt:gwt-dev:$gwtSDK", 
    ])

}

// G R A D L E   T A S K S  -------------------------------------------------------------------

// Also clean the GWT build directory
clean { dependsOn 'cleanGWTBuildDir'}


// Augment the 'processResources' task from the 'java' plugin.  Use filtering to replace
//   '@...@' tags with properties in order to customize the target environment

processResources {
    filter(ReplaceTokens, tokens: localityProperties)
}

// G W T   T A S K S --------------------------------------------------------------------------

task compileGWT(dependsOn: ['compileJava', 'copyWebAppResources'], type:JavaExec) {

    description ='Cross compiles Java into JavaScript for each browser specified'

    // Don't invoke GWT compiler if no source code has changed; 
    //  Gradle Goodness at work here!!

    outputs.upToDateSpec = new org.gradle.api.specs.AndSpec()
    inputs.dir sourceSets.main.java.srcDirs
    outputs.dir new File("${gwtBuildDir}/${gwtModuleRenamedTo}")

    // Define the properties for the 'JavaExec' task
    main ='com.google.gwt.dev.Compiler'
    
    jvmArgs = ['-Xmx512M']                 // 512M Memory, increase for larger Apps

    classpath = files ([
        sourceSets.main.java.srcDirs,      // Contains Java sources to be compiled into JavaScript
        sourceSets.main.runtimeClasspath,  // Contains .gwt.xml file
        configurations.gwtCompile.files    // Contains the GWT compiler
    ])

    args = [ "-war", gwtBuildDir,  gwtModule]

}


// Run the app if the GWT compile was successful
gradle.taskGraph.afterTask { task, taskState ->
    if ( task.name == 'compileGWT' && !taskState.failure )
        java.awt.Desktop.desktop.browse(new File(gwtBuildDir, 'index.html').toURI())
}

// U T I L I T Y   M E T H O D S -------------------------------------------------------------- 

def String findProperty(String propertyName, defaultValue='') {
    def property = rootProject.hasProperty(propertyName) ? rootProject.getProperty(propertyName) : defaultValue
    return property?.trim()
}


task copyWebAppResources(type: Copy) {

    description = "Copies resources into '${gwtBuildDir}'"

    from 'src/main/webapp'
    into gwtBuildDir
}


task cleanGWTBuildDir(type:Delete) {
    delete gwtBuildDir
}



// U N I T   T E S T I N G --------------------------------------------------------------------

// Launch the browser if any test fails and display the report 
gradle.taskGraph.afterTask { task, taskState ->
    if (task.name == 'test' && taskState.failure)
        java.awt.Desktop.desktop.browse(new File(testReportDir, 'index.html').toURI())
}



